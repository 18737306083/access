<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
 <!-- <mvc:resources location="/img/"  mapping="/img/*" /> --> <!--   样就巧妙的把对静态资源的访问由 HandlerMapping 转到 ResourceHttpRequestHandler 处理并返回 -->
 
 <context:component-scan base-package="test" ></context:component-scan>
<mvc:resources location="/js/dist/css/" mapping="/js/dist/css/**"></mvc:resources>
<mvc:resources location="/js/dist/js/" mapping="/js/dist/js/**"></mvc:resources>
<mvc:resources location="/js/jquery-tree/" mapping="/js/jquery-tree/**"></mvc:resources>

<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />  -->

<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
p:viewClass="org.springframework.web.servlet.view.JstlView" >

    <property name="prefix" value="/WEB-INF/jsp/"></property>
    <property name="suffix" value=".jsp"></property>
</bean>
 
<!--异常处理  -->
<!-- springmvc提供的简单异常处理器 -->
<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
     <!-- 定义默认的异常处理页面 -->
     <property name="defaultErrorView" value="/error"/>  
    <!-- 定义异常处理页面用来获取异常信息的变量名，也可不定义，默认名为exception --> 
    <property name="exceptionAttribute" value="ex"/>
    <!-- 定义需要特殊处理的异常，这是重要点 --> 
    <property name="exceptionMappings">
        <props>
            <prop key="java.lang.Exception.Exception">/error</prop>
            <prop key="test.CusException">/cus</prop>
        </props>
        <!-- 还可以定义其他的自定义异常 -->
    </property>
</bean>
<!-- <mvc:interceptors>
    多个拦截器，按顺序执行        
    <mvc:interceptor>
        <mvc:mapping path="/**"/> 表示拦截所有的url包括子url路径
        <bean class="test.LoginInter"/>
    </mvc:interceptor>
     
</mvc:interceptors> -->
<!-- 校验错误信息配置文件 -->



<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
    <!-- 校验器，使用hibernate校验器 -->
    <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
    <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件 -->
    <property name="validationMessageSource" ref="messageSource"/>
</bean>
<!-- 校验错误信息配置文件 -->
<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    <!-- 资源文件名 -->
    <property name="basenames">
        <list>
            <value>classpath:CustomValidationMessage</value>
        </list>
    </property>
    <!-- 资源文件编码格式 -->
    <property name="fileEncodings" value="utf-8"/>
    <!-- 对资源文件内容缓存时间，单位秒 -->
    <property name="cacheSeconds" value="120"/>
</bean>

<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
<property name="maxUploadSize" value="14342020"></property>

<property name="defaultEncoding" value="utf-8"></property>

</bean>
<!--国际化  -->

<!-- 专用拦截器 -->
	<mvc:interceptors>
		<!-- 主题改变拦截器  -->
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
		<property name="paramName" value="theme"></property>
		
		</bean>
	 
	</mvc:interceptors>
	
<!-- 主题 -->
	<bean id="themeSource" class="org.springframework.ui.context.support.ResourceBundleThemeSource">
		<property name="basenamePrefix" value="conf.theme."/>
	</bean>
	<bean id="themeResolver"  class="org.springframework.web.servlet.theme.CookieThemeResolver">  
 		<property name="defaultThemeName" value="default"/>  
	</bean>
	
	
	
   <mvc:annotation-driven   validator="validator"/> 
    
</beans>
